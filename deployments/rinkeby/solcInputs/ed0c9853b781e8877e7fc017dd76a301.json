{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror notEnoughEthSent();\nerror notOwner();\n\n/** @title A contract for crowdfunding\n * @author mme\n * @notice this contract is for demo purpose only\n * @dev this contract implements s_PriceFeeds as library\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    address private immutable i_owner;\n    AggregatorV3Interface private s_PriceFeed;\n    uint256 private constant MIN_USD = 50 * 1e18;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert notOwner();\n        }\n        _;\n    }\n\n    constructor(address s_PriceFeedAddress) {\n        i_owner = msg.sender;\n        s_PriceFeed = AggregatorV3Interface(s_PriceFeedAddress);\n    }\n\n    // currently disabled, as I don't know yet how to unit test the receive and fallback methods\n    //receive() external payable {\n    //    fund();\n    //}\n\n    //fallback() external payable {\n    //    fund();\n    //}\n\n    /**\n     * @notice this function is to add funds to the contract, there is a min amt of 50USD\n     * @dev there will be an error for too less eth sent, the function uses s_PriceFeeds\n     */\n    function fund() public payable {\n        if (msg.value.getConversionRate(s_PriceFeed) < MIN_USD) {\n            revert notEnoughEthSent();\n        }\n\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            s_addressToAmountFunded[s_funders[funderIndex]] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory m_funders = s_funders;\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < m_funders.length;\n            funderIndex++\n        ) {\n            address m_funder = m_funders[funderIndex];\n            s_addressToAmountFunded[m_funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_PriceFeed;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    /** @param funder address of the funder for whom to look up the amount funded\n      * @return amountFunded will return the amount of the input adress. \n    \n     */\n    function getAmountToFunderAddress(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}