{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_PriceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "notEnoughEthSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAmountToFunderAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79a55be26419d8bc70b09b34533df6120e9be560751f9b5ca8118ee37217118f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "975919",
    "logsBloom": "0x
    "blockHash": "0x6f53c9fc2384fb2fbc80117aa748491408417221b724c0e39868896005a60a8c",
    "transactionHash": "0x79a55be26419d8bc70b09b34533df6120e9be560751f9b5ca8118ee37217118f",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "975919",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "ed0c9853b781e8877e7fc017dd76a301",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_PriceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"notEnoughEthSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAmountToFunderAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"mme\",\"details\":\"this contract implements s_PriceFeeds as library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"there will be an error for too less eth sent, the function uses s_PriceFeeds\"},\"getAmountToFunderAddress(address)\":{\"params\":{\"funder\":\"address of the funder for whom to look up the amount funded\"},\"returns\":{\"_0\":\"amountFunded will return the amount of the input adress. \"}}},\"title\":\"A contract for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"this function is to add funds to the contract, there is a min amt of 50USD\"}},\"notice\":\"this contract is for demo purpose only\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror notEnoughEthSent();\\nerror notOwner();\\n\\n/** @title A contract for crowdfunding\\n * @author mme\\n * @notice this contract is for demo purpose only\\n * @dev this contract implements s_PriceFeeds as library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_PriceFeed;\\n    uint256 private constant MIN_USD = 50 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert notOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address s_PriceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_PriceFeed = AggregatorV3Interface(s_PriceFeedAddress);\\n    }\\n\\n    // currently disabled, as I don't know yet how to unit test the receive and fallback methods\\n    //receive() external payable {\\n    //    fund();\\n    //}\\n\\n    //fallback() external payable {\\n    //    fund();\\n    //}\\n\\n    /**\\n     * @notice this function is to add funds to the contract, there is a min amt of 50USD\\n     * @dev there will be an error for too less eth sent, the function uses s_PriceFeeds\\n     */\\n    function fund() public payable {\\n        if (msg.value.getConversionRate(s_PriceFeed) < MIN_USD) {\\n            revert notEnoughEthSent();\\n        }\\n\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            s_addressToAmountFunded[s_funders[funderIndex]] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory m_funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < m_funders.length;\\n            funderIndex++\\n        ) {\\n            address m_funder = m_funders[funderIndex];\\n            s_addressToAmountFunded[m_funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_PriceFeed;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    /** @param funder address of the funder for whom to look up the amount funded\\n      * @return amountFunded will return the amount of the input adress. \\n    \\n     */\\n    function getAmountToFunderAddress(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n}\\n\",\"keccak256\":\"0x624eea17e55226c8cb19544d3597e8334acc2c6924ec1beda888c8f8bbcbf2a3\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xf065355ec636076563c3f8631311a6a394b165d4c6303a7d4c6701b7faf50067\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011c7380380620011c783398181016040528101906200003791906200011f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e782620000ba565b9050919050565b620000f981620000da565b81146200010557600080fd5b50565b6000815190506200011981620000ee565b92915050565b600060208284031215620001385762000137620000b5565b5b6000620001488482850162000108565b91505092915050565b60805160601c6110496200017e6000396000818161017f01528181610405015261057201526110496000f3fe6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd146100f4578063b60d42881461011f578063be2693f014610129578063d7b4750c1461014057610070565b80633ccfd60b1461007557806355e2c3621461008c578063893d20e8146100c9575b600080fd5b34801561008157600080fd5b5061008a61017d565b005b34801561009857600080fd5b506100b360048036038101906100ae9190610a43565b6103b8565b6040516100c09190610a89565b60405180910390f35b3480156100d557600080fd5b506100de610401565b6040516100eb9190610ab3565b60405180910390f35b34801561010057600080fd5b50610109610429565b6040516101169190610b2d565b60405180910390f35b610127610452565b005b34801561013557600080fd5b5061013e610570565b005b34801561014c57600080fd5b5061016760048036038101906101629190610b74565b610815565b6040516101749190610ab3565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610202576040517f251c9d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102a8576000600260006001848154811061022c5761022b610ba1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806102a090610bff565b915050610205565b50600067ffffffffffffffff8111156102c4576102c3610c48565b5b6040519080825280602002602001820160405280156102f25781602001602082028036833780820191505090505b5060019080519060200190610308929190610939565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161032f90610ca8565b60006040518083038185875af1925050503d806000811461036c576040519150601f19603f3d011682016040523d82523d6000602084013e610371565b606091505b50509050806103b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ac90610d1a565b60405180910390fd5b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061048f60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461085d90919063ffffffff16565b10156104c7576040517f35a5893a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f5576040517f251c9d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561067957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161062f575b5050505050905060005b81518110156107045760008282815181106106a1576106a0610ba1565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106fc90610bff565b915050610683565b50600067ffffffffffffffff8111156107205761071f610c48565b5b60405190808252806020026020018201604052801561074e5781602001602082028036833780820191505090505b5060019080519060200190610764929190610939565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161078b90610ca8565b60006040518083038185875af1925050503d80600081146107c8576040519150601f19603f3d011682016040523d82523d6000602084013e6107cd565b606091505b5050905080610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080890610d1a565b60405180910390fd5b5050565b60006001828154811061082b5761082a610ba1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061086983610899565b90506000670de0b6b3a764000085836108829190610d3a565b61088c9190610dc3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190610e81565b5050509150506402540be400816109319190610efc565b915050919050565b8280548282559060005260206000209081019282156109b2579160200282015b828111156109b15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610959565b5b5090506109bf91906109c3565b5090565b5b808211156109dc5760008160009055506001016109c4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a10826109e5565b9050919050565b610a2081610a05565b8114610a2b57600080fd5b50565b600081359050610a3d81610a17565b92915050565b600060208284031215610a5957610a586109e0565b5b6000610a6784828501610a2e565b91505092915050565b6000819050919050565b610a8381610a70565b82525050565b6000602082019050610a9e6000830184610a7a565b92915050565b610aad81610a05565b82525050565b6000602082019050610ac86000830184610aa4565b92915050565b6000819050919050565b6000610af3610aee610ae9846109e5565b610ace565b6109e5565b9050919050565b6000610b0582610ad8565b9050919050565b6000610b1782610afa565b9050919050565b610b2781610b0c565b82525050565b6000602082019050610b426000830184610b1e565b92915050565b610b5181610a70565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600060208284031215610b8a57610b896109e0565b5b6000610b9884828501610b5f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c0a82610a70565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3d57610c3c610bd0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c92600083610c77565b9150610c9d82610c82565b600082019050919050565b6000610cb382610c85565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d04600b83610cbd565b9150610d0f82610cce565b602082019050919050565b60006020820190508181036000830152610d3381610cf7565b9050919050565b6000610d4582610a70565b9150610d5083610a70565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d8957610d88610bd0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dce82610a70565b9150610dd983610a70565b925082610de957610de8610d94565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1381610df4565b8114610e1e57600080fd5b50565b600081519050610e3081610e0a565b92915050565b6000819050919050565b610e4981610e36565b8114610e5457600080fd5b50565b600081519050610e6681610e40565b92915050565b600081519050610e7b81610b48565b92915050565b600080600080600060a08688031215610e9d57610e9c6109e0565b5b6000610eab88828901610e21565b9550506020610ebc88828901610e57565b9450506040610ecd88828901610e6c565b9350506060610ede88828901610e6c565b9250506080610eef88828901610e21565b9150509295509295909350565b6000610f0782610e36565b9150610f1283610e36565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f5157610f50610bd0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f8e57610f8d610bd0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fcb57610fca610bd0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561100857611007610bd0565b5b82820290509291505056fea264697066735822122004ead5d0d9a48ca7096cbc0f71a8b6e39d18e9515f6293a9ee9c0b6b13f5c92e64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd146100f4578063b60d42881461011f578063be2693f014610129578063d7b4750c1461014057610070565b80633ccfd60b1461007557806355e2c3621461008c578063893d20e8146100c9575b600080fd5b34801561008157600080fd5b5061008a61017d565b005b34801561009857600080fd5b506100b360048036038101906100ae9190610a43565b6103b8565b6040516100c09190610a89565b60405180910390f35b3480156100d557600080fd5b506100de610401565b6040516100eb9190610ab3565b60405180910390f35b34801561010057600080fd5b50610109610429565b6040516101169190610b2d565b60405180910390f35b610127610452565b005b34801561013557600080fd5b5061013e610570565b005b34801561014c57600080fd5b5061016760048036038101906101629190610b74565b610815565b6040516101749190610ab3565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610202576040517f251c9d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102a8576000600260006001848154811061022c5761022b610ba1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806102a090610bff565b915050610205565b50600067ffffffffffffffff8111156102c4576102c3610c48565b5b6040519080825280602002602001820160405280156102f25781602001602082028036833780820191505090505b5060019080519060200190610308929190610939565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161032f90610ca8565b60006040518083038185875af1925050503d806000811461036c576040519150601f19603f3d011682016040523d82523d6000602084013e610371565b606091505b50509050806103b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ac90610d1a565b60405180910390fd5b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061048f60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461085d90919063ffffffff16565b10156104c7576040517f35a5893a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f5576040517f251c9d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561067957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161062f575b5050505050905060005b81518110156107045760008282815181106106a1576106a0610ba1565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106fc90610bff565b915050610683565b50600067ffffffffffffffff8111156107205761071f610c48565b5b60405190808252806020026020018201604052801561074e5781602001602082028036833780820191505090505b5060019080519060200190610764929190610939565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161078b90610ca8565b60006040518083038185875af1925050503d80600081146107c8576040519150601f19603f3d011682016040523d82523d6000602084013e6107cd565b606091505b5050905080610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080890610d1a565b60405180910390fd5b5050565b60006001828154811061082b5761082a610ba1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061086983610899565b90506000670de0b6b3a764000085836108829190610d3a565b61088c9190610dc3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190610e81565b5050509150506402540be400816109319190610efc565b915050919050565b8280548282559060005260206000209081019282156109b2579160200282015b828111156109b15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610959565b5b5090506109bf91906109c3565b5090565b5b808211156109dc5760008160009055506001016109c4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a10826109e5565b9050919050565b610a2081610a05565b8114610a2b57600080fd5b50565b600081359050610a3d81610a17565b92915050565b600060208284031215610a5957610a586109e0565b5b6000610a6784828501610a2e565b91505092915050565b6000819050919050565b610a8381610a70565b82525050565b6000602082019050610a9e6000830184610a7a565b92915050565b610aad81610a05565b82525050565b6000602082019050610ac86000830184610aa4565b92915050565b6000819050919050565b6000610af3610aee610ae9846109e5565b610ace565b6109e5565b9050919050565b6000610b0582610ad8565b9050919050565b6000610b1782610afa565b9050919050565b610b2781610b0c565b82525050565b6000602082019050610b426000830184610b1e565b92915050565b610b5181610a70565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600060208284031215610b8a57610b896109e0565b5b6000610b9884828501610b5f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c0a82610a70565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3d57610c3c610bd0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c92600083610c77565b9150610c9d82610c82565b600082019050919050565b6000610cb382610c85565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d04600b83610cbd565b9150610d0f82610cce565b602082019050919050565b60006020820190508181036000830152610d3381610cf7565b9050919050565b6000610d4582610a70565b9150610d5083610a70565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d8957610d88610bd0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dce82610a70565b9150610dd983610a70565b925082610de957610de8610d94565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1381610df4565b8114610e1e57600080fd5b50565b600081519050610e3081610e0a565b92915050565b6000819050919050565b610e4981610e36565b8114610e5457600080fd5b50565b600081519050610e6681610e40565b92915050565b600081519050610e7b81610b48565b92915050565b600080600080600060a08688031215610e9d57610e9c6109e0565b5b6000610eab88828901610e21565b9550506020610ebc88828901610e57565b9450506040610ecd88828901610e6c565b9350506060610ede88828901610e6c565b9250506080610eef88828901610e21565b9150509295509295909350565b6000610f0782610e36565b9150610f1283610e36565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f5157610f50610bd0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f8e57610f8d610bd0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fcb57610fca610bd0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561100857611007610bd0565b5b82820290509291505056fea264697066735822122004ead5d0d9a48ca7096cbc0f71a8b6e39d18e9515f6293a9ee9c0b6b13f5c92e64736f6c63430008080033",
  "devdoc": {
    "author": "mme",
    "details": "this contract implements s_PriceFeeds as library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "there will be an error for too less eth sent, the function uses s_PriceFeeds"
      },
      "getAmountToFunderAddress(address)": {
        "params": {
          "funder": "address of the funder for whom to look up the amount funded"
        },
        "returns": {
          "_0": "amountFunded will return the amount of the input adress. "
        }
      }
    },
    "title": "A contract for crowdfunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "this function is to add funds to the contract, there is a min amt of 50USD"
      }
    },
    "notice": "this contract is for demo purpose only",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_PriceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}